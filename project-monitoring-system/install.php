<?php
session_start();

// Check if already installed
if (file_exists('config.php')) {
    require_once 'config.php';
    if (defined('INSTALLED') && INSTALLED === true) {
        die('The system is already installed. Please delete config.php if you want to reinstall.');
    }
}

$step = isset($_GET['step']) ? (int)$_GET['step'] : 1;
$error = '';
$success = '';

// Process form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if ($step === 1) {
        // Test database connection
        $db_host = $_POST['db_host'];
        $db_name = $_POST['db_name'];
        $db_user = $_POST['db_user'];
        $db_pass = $_POST['db_pass'];
        
        try {
            $pdo = new PDO(
                "mysql:host=$db_host;charset=utf8mb4",
                $db_user,
                $db_pass,
                array(PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION)
            );
            
            // Try to create database if it doesn't exist
            $pdo->exec("CREATE DATABASE IF NOT EXISTS `$db_name` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
            
            // Store database info in session
            $_SESSION['db_host'] = $db_host;
            $_SESSION['db_name'] = $db_name;
            $_SESSION['db_user'] = $db_user;
            $_SESSION['db_pass'] = $db_pass;
            
            header('Location: install.php?step=2');
            exit();
        } catch (PDOException $e) {
            $error = 'Database connection failed: ' . $e->getMessage();
        }
    } elseif ($step === 2) {
        // Create admin account
        $admin_name = $_POST['admin_name'];
        $admin_email = $_POST['admin_email'];
        $admin_password = $_POST['admin_password'];
        $admin_password_confirm = $_POST['admin_password_confirm'];
        
        if ($admin_password !== $admin_password_confirm) {
            $error = 'Passwords do not match.';
        } elseif (strlen($admin_password) < 8) {
            $error = 'Password must be at least 8 characters long.';
        } elseif (!filter_var($admin_email, FILTER_VALIDATE_EMAIL)) {
            $error = 'Invalid email address.';
        } else {
            // Store admin info in session
            $_SESSION['admin_name'] = $admin_name;
            $_SESSION['admin_email'] = $admin_email;
            $_SESSION['admin_password'] = password_hash($admin_password, PASSWORD_DEFAULT);
            
            header('Location: install.php?step=3');
            exit();
        }
    } elseif ($step === 3) {
        // Install database and create config
        try {
            $pdo = new PDO(
                "mysql:host={$_SESSION['db_host']};dbname={$_SESSION['db_name']};charset=utf8mb4",
                $_SESSION['db_user'],
                $_SESSION['db_pass'],
                array(PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION)
            );
            
            // Install database schema
            $sqlStatements = getSqlStatements();
            
            foreach ($sqlStatements as $statement) {
                if (!empty(trim($statement))) {
                    $pdo->exec($statement);
                }
            }
            
            // Insert admin user
            $stmt = $pdo->prepare("
                INSERT INTO users (full_name, email, password_hash, role_id) 
                VALUES (?, ?, ?, (SELECT id FROM roles WHERE name = 'Admin'))
            ");
            $stmt->execute([
                $_SESSION['admin_name'],
                $_SESSION['admin_email'],
                $_SESSION['admin_password']
            ]);
            
            // Create config file
            $configContent = "<?php
/**
 * Configuration file generated by installer
 * Generated on: " . date('Y-m-d H:i:s') . "
 */

// Mark as installed
define('INSTALLED', true);

// Database configuration
define('DB_HOST', '" . addslashes($_SESSION['db_host']) . "');
define('DB_NAME', '" . addslashes($_SESSION['db_name']) . "');
define('DB_USER', '" . addslashes($_SESSION['db_user']) . "');
define('DB_PASS', '" . addslashes($_SESSION['db_pass']) . "');

// System settings
define('SITE_NAME', 'Project Monitoring System');
define('SITE_URL', '" . getBaseUrl() . "');
define('TIMEZONE', 'UTC');

// Email settings (configure these later)
define('SMTP_HOST', '');
define('SMTP_PORT', 587);
define('SMTP_USER', '');
define('SMTP_PASS', '');
define('SMTP_FROM_EMAIL', 'noreply@" . $_SERVER['HTTP_HOST'] . "');
define('SMTP_FROM_NAME', 'Project Monitoring System');

// Security settings
define('SESSION_LIFETIME', 86400); // 24 hours
define('PASSWORD_RESET_TIMEOUT', 3600); // 1 hour
define('MAX_LOGIN_ATTEMPTS', 5);
define('LOCKOUT_TIME', 900); // 15 minutes

?>";
            
            file_put_contents('config.php', $configContent);
            
            // Update db.php to use config.php
            $dbPhpContent = "<?php
/**
 * Database Connection File
 * This file now loads configuration from config.php
 */

// Load configuration
require_once __DIR__ . '/config.php';

// Create database connection
try {
    \$pdo = new PDO(
        \"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME . \";charset=utf8mb4\",
        DB_USER,
        DB_PASS,
        array(
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
            PDO::ATTR_EMULATE_PREPARES => false
        )
    );
} catch (PDOException \$e) {
    // In production, log this error instead of displaying it
    die(\"Database connection failed: \" . \$e->getMessage());
}

// Function to check if user is logged in
function isLoggedIn() {
    return isset(\$_SESSION['user_id']) && !empty(\$_SESSION['user_id']);
}

// Function to redirect to login if not authenticated
function requireLogin() {
    if (!isLoggedIn()) {
        header(\"Location: login.php\");
        exit();
    }
}

// Function to sanitize input
function sanitizeInput(\$data) {
    \$data = trim(\$data);
    \$data = stripslashes(\$data);
    \$data = htmlspecialchars(\$data);
    return \$data;
}

// Start session if not already started
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}
?>";
            
            file_put_contents('db.php', $dbPhpContent);
            
            // Clear session
            session_destroy();
            
            $success = true;
        } catch (Exception $e) {
            $error = 'Installation failed: ' . $e->getMessage();
        }
    }
}

// Function to get base URL
function getBaseUrl() {
    $protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https' : 'http';
    $host = $_SERVER['HTTP_HOST'];
    $path = dirname($_SERVER['REQUEST_URI']);
    return $protocol . '://' . $host . rtrim($path, '/');
}

// Function to get all SQL statements
function getSqlStatements() {
    $sql = [];
    
    // Base schema
    $sql[] = "CREATE TABLE IF NOT EXISTS `users` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `full_name` VARCHAR(100) NOT NULL,
        `email` VARCHAR(100) NOT NULL,
        `password_hash` VARCHAR(255) NOT NULL,
        `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        UNIQUE KEY `unique_email` (`email`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    $sql[] = "CREATE TABLE IF NOT EXISTS `projects` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `user_id` INT(11) NOT NULL,
        `project_name` VARCHAR(200) NOT NULL,
        `project_url` VARCHAR(255) DEFAULT NULL,
        `description` TEXT,
        `date_created` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        KEY `fk_user_id` (`user_id`),
        CONSTRAINT `fk_projects_user` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    $sql[] = "CREATE TABLE IF NOT EXISTS `incidents` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `project_id` INT(11) NOT NULL,
        `status` ENUM('Open', 'Resolved') NOT NULL DEFAULT 'Open',
        `root_cause` TEXT NOT NULL,
        `started_at` DATETIME NOT NULL,
        `duration` VARCHAR(50) DEFAULT NULL,
        `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        KEY `fk_project_id` (`project_id`),
        KEY `idx_status` (`status`),
        CONSTRAINT `fk_incidents_project` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    $sql[] = "CREATE INDEX IF NOT EXISTS `idx_user_email` ON `users` (`email`)";
    $sql[] = "CREATE INDEX IF NOT EXISTS `idx_project_user` ON `projects` (`user_id`)";
    $sql[] = "CREATE INDEX IF NOT EXISTS `idx_incident_project` ON `incidents` (`project_id`)";
    
    // Monitoring features
    $sql[] = "CREATE TABLE IF NOT EXISTS `http_status_logs` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `project_id` INT(11) NOT NULL,
        `status_code` INT(3) NOT NULL,
        `count` INT(11) DEFAULT 1,
        `checked_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        KEY `idx_project_status` (`project_id`, `status_code`),
        KEY `idx_checked_at` (`checked_at`),
        CONSTRAINT `fk_status_project` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    $sql[] = "CREATE TABLE IF NOT EXISTS `uptime_logs` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `project_id` INT(11) NOT NULL,
        `is_up` BOOLEAN DEFAULT TRUE,
        `response_time` INT(11) DEFAULT NULL COMMENT 'Response time in milliseconds',
        `checked_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        KEY `idx_project_uptime` (`project_id`, `checked_at`),
        CONSTRAINT `fk_uptime_project` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    $sql[] = "CREATE TABLE IF NOT EXISTS `ssl_certificates` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `project_id` INT(11) NOT NULL,
        `issuer` VARCHAR(255) DEFAULT NULL,
        `expiry_date` DATE DEFAULT NULL,
        `domain_expiry_date` DATE DEFAULT NULL,
        `last_checked` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        UNIQUE KEY `unique_project_ssl` (`project_id`),
        CONSTRAINT `fk_ssl_project` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    $sql[] = "CREATE TABLE IF NOT EXISTS `response_times` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `project_id` INT(11) NOT NULL,
        `response_time` INT(11) NOT NULL COMMENT 'Response time in milliseconds',
        `measured_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        KEY `idx_project_response` (`project_id`, `measured_at`),
        CONSTRAINT `fk_response_project` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    $sql[] = "ALTER TABLE `projects` ADD COLUMN IF NOT EXISTS `server_location` VARCHAR(100) DEFAULT NULL AFTER `description`";
    $sql[] = "ALTER TABLE `projects` ADD COLUMN IF NOT EXISTS `last_checked` TIMESTAMP NULL DEFAULT NULL AFTER `server_location`";
    $sql[] = "ALTER TABLE `projects` ADD COLUMN IF NOT EXISTS `monitoring_region` VARCHAR(100) DEFAULT 'North America' AFTER `last_checked`";
    
    $sql[] = "CREATE TABLE IF NOT EXISTS `cron_jobs` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `project_id` INT(11) NOT NULL,
        `job_name` VARCHAR(255) NOT NULL,
        `schedule` VARCHAR(100) NOT NULL COMMENT 'Cron expression',
        `last_run` TIMESTAMP NULL DEFAULT NULL,
        `next_run` TIMESTAMP NULL DEFAULT NULL,
        `status` ENUM('success', 'failed', 'running', 'pending') DEFAULT 'pending',
        `last_duration` INT(11) DEFAULT NULL COMMENT 'Duration in seconds',
        `error_message` TEXT DEFAULT NULL,
        `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        KEY `idx_project_cron` (`project_id`),
        CONSTRAINT `fk_cron_project` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    $sql[] = "CREATE TABLE IF NOT EXISTS `notifications` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `user_id` INT(11) NOT NULL,
        `project_id` INT(11) NOT NULL,
        `type` ENUM('down', 'up', 'ssl_expiry', 'domain_expiry', 'cron_failed') NOT NULL,
        `title` VARCHAR(255) NOT NULL,
        `message` TEXT NOT NULL,
        `is_read` BOOLEAN DEFAULT FALSE,
        `sent_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        KEY `idx_user_notifications` (`user_id`, `is_read`),
        KEY `idx_project_notifications` (`project_id`),
        CONSTRAINT `fk_notification_user` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
        CONSTRAINT `fk_notification_project` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    $sql[] = "CREATE TABLE IF NOT EXISTS `notification_settings` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `user_id` INT(11) NOT NULL,
        `project_id` INT(11) NOT NULL,
        `notify_on_down` BOOLEAN DEFAULT TRUE,
        `notify_on_ssl_expiry` BOOLEAN DEFAULT TRUE,
        `notify_on_domain_expiry` BOOLEAN DEFAULT TRUE,
        `notify_on_cron_failure` BOOLEAN DEFAULT TRUE,
        `email_notifications` BOOLEAN DEFAULT TRUE,
        `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        UNIQUE KEY `unique_user_project_settings` (`user_id`, `project_id`),
        CONSTRAINT `fk_settings_user` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
        CONSTRAINT `fk_settings_project` FOREIGN KEY (`project_id`) REFERENCES `projects` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    // Password reset table
    $sql[] = "CREATE TABLE IF NOT EXISTS `password_reset_tokens` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `user_id` INT(11) NOT NULL,
        `token` VARCHAR(64) NOT NULL,
        `expires_at` TIMESTAMP NOT NULL,
        `used` BOOLEAN DEFAULT FALSE,
        `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        UNIQUE KEY `unique_token` (`token`),
        KEY `idx_user_token` (`user_id`, `token`),
        KEY `idx_expires` (`expires_at`),
        CONSTRAINT `fk_reset_user` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    // Roles tables
    $sql[] = "CREATE TABLE IF NOT EXISTS `roles` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `name` VARCHAR(50) NOT NULL,
        `description` TEXT DEFAULT NULL,
        `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        UNIQUE KEY `unique_role_name` (`name`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    $sql[] = "ALTER TABLE `users` 
        ADD COLUMN IF NOT EXISTS `role_id` INT(11) DEFAULT NULL AFTER `password_hash`,
        ADD KEY IF NOT EXISTS `fk_user_role` (`role_id`)";
    
    // Check if constraint exists before adding
    $sql[] = "SET @constraint_exists = (
        SELECT COUNT(*) 
        FROM information_schema.TABLE_CONSTRAINTS 
        WHERE CONSTRAINT_SCHEMA = DATABASE() 
        AND TABLE_NAME = 'users' 
        AND CONSTRAINT_NAME = 'fk_users_role'
    )";
    
    $sql[] = "SET @sql = IF(@constraint_exists = 0, 
        'ALTER TABLE users ADD CONSTRAINT fk_users_role FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE SET NULL',
        'SELECT 1'
    )";
    
    $sql[] = "PREPARE stmt FROM @sql";
    $sql[] = "EXECUTE stmt";
    $sql[] = "DEALLOCATE PREPARE stmt";
    
    $sql[] = "CREATE TABLE IF NOT EXISTS `url_limits` (
        `id` INT(11) NOT NULL AUTO_INCREMENT,
        `user_id` INT(11) NOT NULL,
        `max_urls` INT(11) NOT NULL DEFAULT 10,
        `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (`id`),
        UNIQUE KEY `unique_user_limit` (`user_id`),
        CONSTRAINT `fk_url_limits_user` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
    
    // Insert default roles
    $sql[] = "INSERT IGNORE INTO `roles` (`name`, `description`) VALUES
        ('Admin', 'Administrator with full system access'),
        ('Customer', 'Regular customer with limited access')";
    
    // Create view
    $sql[] = "CREATE OR REPLACE VIEW `user_url_count` AS
        SELECT 
            u.id AS user_id,
            u.email,
            r.name AS role_name,
            COUNT(DISTINCT p.project_url) AS url_count,
            COALESCE(ul.max_urls, 10) AS url_limit
        FROM users u
        LEFT JOIN roles r ON u.role_id = r.id
        LEFT JOIN projects p ON u.id = p.user_id AND p.project_url IS NOT NULL AND p.project_url != ''
        LEFT JOIN url_limits ul ON u.id = ul.user_id
        GROUP BY u.id, u.email, r.name, ul.max_urls";
    
    $sql[] = "CREATE INDEX IF NOT EXISTS `idx_projects_url` ON `projects` (`project_url`)";
    
    return $sql;
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project Monitoring System - Installation</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: #f5f5f5;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .installer-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            width: 100%;
            overflow: hidden;
        }
        
        .installer-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .installer-header h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        .installer-header p {
            opacity: 0.9;
            font-size: 16px;
        }
        
        .progress-bar {
            background: rgba(255, 255, 255, 0.2);
            height: 8px;
            border-radius: 4px;
            margin-top: 20px;
            overflow: hidden;
        }
        
        .progress-fill {
            background: white;
            height: 100%;
            border-radius: 4px;
            transition: width 0.3s ease;
        }
        
        .installer-body {
            padding: 40px;
        }
        
        .step-title {
            font-size: 24px;
            margin-bottom: 10px;
            color: #333;
        }
        
        .step-description {
            color: #666;
            margin-bottom: 30px;
            line-height: 1.6;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 500;
        }
        
        .form-group input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        .form-group input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .form-group small {
            display: block;
            margin-top: 6px;
            color: #999;
            font-size: 14px;
        }
        
        .error-message {
            background: #fee;
            border: 1px solid #fcc;
            color: #c33;
            padding: 12px 16px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .success-message {
            background: #efe;
            border: 1px solid #cfc;
            color: #363;
            padding: 12px 16px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 30px;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }
        
        .btn-primary {
            background: #667eea;
            color: white;
            flex: 1;
        }
        
        .btn-primary:hover {
            background: #5a67d8;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        
        .btn-secondary {
            background: #e2e8f0;
            color: #4a5568;
        }
        
        .btn-secondary:hover {
            background: #cbd5e0;
        }
        
        .requirements {
            background: #f7fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .requirements h3 {
            margin-bottom: 10px;
            color: #2d3748;
        }
        
        .requirements ul {
            list-style: none;
            margin-left: 0;
        }
        
        .requirements li {
            padding: 8px 0;
            padding-left: 24px;
            position: relative;
        }
        
        .requirements li:before {
            content: '✓';
            position: absolute;
            left: 0;
            color: #48bb78;
            font-weight: bold;
        }
        
        .complete-container {
            text-align: center;
            padding: 40px;
        }
        
        .complete-icon {
            width: 80px;
            height: 80px;
            background: #48bb78;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
        }
        
        .complete-icon svg {
            width: 40px;
            height: 40px;
            fill: white;
        }
        
        .complete-title {
            font-size: 28px;
            margin-bottom: 10px;
            color: #2d3748;
        }
        
        .complete-message {
            color: #718096;
            margin-bottom: 30px;
            line-height: 1.6;
        }
        
        .info-box {
            background: #bee3f8;
            border: 1px solid #90cdf4;
            color: #2c5282;
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: left;
        }
        
        .info-box strong {
            display: block;
            margin-bottom: 4px;
        }
        
        .info-box code {
            background: rgba(255, 255, 255, 0.7);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Monaco', 'Consolas', monospace;
        }
    </style>
</head>
<body>
    <div class="installer-container">
        <div class="installer-header">
            <h1>Project Monitoring System</h1>
            <p>Installation Wizard</p>
            <div class="progress-bar">
                <div class="progress-fill" style="width: <?php echo ($step / 3) * 100; ?>%"></div>
            </div>
        </div>
        
        <div class="installer-body">
            <?php if (!empty($error)): ?>
                <div class="error-message"><?php echo htmlspecialchars($error); ?></div>
            <?php endif; ?>
            
            <?php if ($step === 1): ?>
                <h2 class="step-title">Step 1: Database Configuration</h2>
                <p class="step-description">Enter your MySQL database connection details. The installer will create the database if it doesn't exist.</p>
                
                <form method="POST">
                    <div class="form-group">
                        <label for="db_host">Database Host</label>
                        <input type="text" id="db_host" name="db_host" value="localhost" required>
                        <small>Usually 'localhost' for most hosting providers</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="db_name">Database Name</label>
                        <input type="text" id="db_name" name="db_name" placeholder="project_monitoring" required>
                        <small>Will be created if it doesn't exist</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="db_user">Database Username</label>
                        <input type="text" id="db_user" name="db_user" placeholder="your_db_user" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="db_pass">Database Password</label>
                        <input type="password" id="db_pass" name="db_pass" placeholder="your_db_password" required>
                    </div>
                    
                    <div class="button-group">
                        <button type="submit" class="btn btn-primary">Test Connection & Continue</button>
                    </div>
                </form>
                
            <?php elseif ($step === 2): ?>
                <h2 class="step-title">Step 2: Administrator Account</h2>
                <p class="step-description">Create the administrator account for managing the system.</p>
                
                <form method="POST">
                    <div class="form-group">
                        <label for="admin_name">Full Name</label>
                        <input type="text" id="admin_name" name="admin_name" placeholder="John Doe" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="admin_email">Email Address</label>
                        <input type="email" id="admin_email" name="admin_email" placeholder="admin@example.com" required>
                        <small>This will be your login email</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="admin_password">Password</label>
                        <input type="password" id="admin_password" name="admin_password" placeholder="Enter a strong password" required minlength="8">
                        <small>Minimum 8 characters</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="admin_password_confirm">Confirm Password</label>
                        <input type="password" id="admin_password_confirm" name="admin_password_confirm" placeholder="Confirm your password" required>
                    </div>
                    
                    <div class="button-group">
                        <a href="install.php?step=1" class="btn btn-secondary">Back</a>
                        <button type="submit" class="btn btn-primary">Create Account & Continue</button>
                    </div>
                </form>
                
            <?php elseif ($step === 3): ?>
                <h2 class="step-title">Step 3: Installation</h2>
                <p class="step-description">Ready to install the Project Monitoring System with your configuration.</p>
                
                <div class="requirements">
                    <h3>Installation will:</h3>
                    <ul>
                        <li>Create all necessary database tables</li>
                        <li>Set up user roles and permissions</li>
                        <li>Create your administrator account</li>
                        <li>Generate configuration files</li>
                        <li>Set up monitoring capabilities</li>
                    </ul>
                </div>
                
                <form method="POST">
                    <div class="button-group">
                        <a href="install.php?step=2" class="btn btn-secondary">Back</a>
                        <button type="submit" class="btn btn-primary">Install Now</button>
                    </div>
                </form>
                
            <?php elseif ($success === true): ?>
                <div class="complete-container">
                    <div class="complete-icon">
                        <svg viewBox="0 0 24 24">
                            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/>
                        </svg>
                    </div>
                    
                    <h2 class="complete-title">Installation Complete!</h2>
                    <p class="complete-message">
                        The Project Monitoring System has been successfully installed. 
                        You can now log in with your administrator account.
                    </p>
                    
                    <div class="info-box">
                        <strong>Administrator Email:</strong>
                        <code><?php echo htmlspecialchars($_SESSION['admin_email'] ?? ''); ?></code>
                    </div>
                    
                    <div class="success-message">
                        <strong>Important Security Notes:</strong>
                        <ul style="margin-top: 10px; padding-left: 20px;">
                            <li>Delete or rename install.php for security</li>
                            <li>Set proper file permissions on config.php (644)</li>
                            <li>Configure email settings in config.php for notifications</li>
                        </ul>
                    </div>
                    
                    <div class="button-group">
                        <a href="login.php" class="btn btn-primary">Go to Login</a>
                    </div>
                </div>
            <?php endif; ?>
        </div>
    </div>
</body>
</html>